
package org.cucina.tools.eclipselink;

import java.io.FileWriter;

import org.eclipse.persistence.exceptions.EclipseLinkException;
import org.eclipse.persistence.exceptions.ValidationException;
import org.eclipse.persistence.internal.sessions.DatabaseSessionImpl;
import org.eclipse.persistence.tools.schemaframework.SchemaManager;
import org.eclipse.persistence.tools.schemaframework.TableCreator;
import org.springframework.util.Assert;


/**
 * SchemaManager implementation which has been adapted for generating the historic
 * schema.

 */
public class HistoricSchemaManager
    extends SchemaManager {
    private HistoricTableGenerator generator;
    private String initScriptName;

    /**
     * Constructor
     * @param session
     * @param initScriptName fileName for the history init script
     */
    public HistoricSchemaManager(org.eclipse.persistence.sessions.DatabaseSession session,
        String initScriptName) {
        super(session);
        Assert.hasText(initScriptName, "initScriptName is required!");
        this.initScriptName = initScriptName;
    }

    /**
     * Constructor
     * @param session
     * @param initScriptName fileName for the history init script
     */
    public HistoricSchemaManager(DatabaseSessionImpl session, String initScriptName) {
        super(session);
        Assert.hasText(initScriptName, "initScriptName is required!");
        this.initScriptName = initScriptName;
    }

    /**
     * Once we've created the tables write the history initialization script if we're
     * generating the scripts.
     */
    @Override
    public void replaceDefaultTables(boolean dontReplaceSequenceTable,
        boolean dontReplaceSequences, boolean generateFKConstraints)
        throws EclipseLinkException {
        super.replaceDefaultTables(dontReplaceSequenceTable, dontReplaceSequences,
            generateFKConstraints);

        if (!shouldWriteToDatabase()) {
            writeInitializationScript();
        }
    }

    /**
     * JAVADOC Method Level Comments
     *
     * @param generateFKConstraints JAVADOC.
     *
     * @return JAVADOC.
     */
    @Override
    protected TableCreator getDefaultTableCreator(boolean generateFKConstraints) {
        if (defaultTableCreator == null) {
            generator = new HistoricTableGenerator(session.getProject(), generateFKConstraints);
            defaultTableCreator = generator.generateDefaultTableCreator();
            defaultTableCreator.setIgnoreDatabaseException(true);
        }

        return defaultTableCreator;
    }

    /**
     * No-op implementation as sequences are not required in the historic
     * schema.
     */
    @Override
    protected void createOrReplaceSequences(boolean createSequenceTables,
        boolean createSequenceObjects)
        throws EclipseLinkException {
    }

    /**
     * Write the initializationScript generated by the
     * <code>HistoricTableGenerator</code> to the file.
     */
    private void writeInitializationScript() {
        FileWriter writer = null;

        try {
            writer = new FileWriter(initScriptName);
            writer.write(generator.getHistoryInitializerScript());
        } catch (java.io.IOException ioException) {
            throw ValidationException.fileError(ioException);
        } finally {
            if (writer != null) {
                try {
                    writer.close();
                } catch (java.io.IOException ioException) {
                    throw ValidationException.fileError(ioException);
                }
            }
        }
    }
}
